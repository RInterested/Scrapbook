require(png)

scanned = readPNG('bird_small.png')

dim(scanned)
bird = scanned[,,1:3]
dim(bird)
is.array(bird)


long_bird = apply(bird, 3, t)
dim(long_bird); is.matrix(long_bird)

temp = long_bird[sample(nrow(long_bird)),]
# K centroids = 20
k = 20
initial_centroids = temp[1:k,]



# Closest centroids:

group = matrix(rep(0, nrow(long_bird)), ncol=1)
for (i in 1:nrow(long_bird)){
  index = 0
  w = 10^10
  for (j in 1:k){
    sum_sq = sum((long_bird[i, ] - initial_centroids[j, ])^2)
    if(sum_sq < w){
      w = sum_sq
      index = j
    } 
  }
  group[i] = index
}

# Recalculate centroids:

new_centroids = matrix(rep(0, k*3), ncol=3)
for(i in 1:k){
  new_centroids[i,]=colMeans(long_bird[group==i,])
}

# Regrouping:


for(t in 1:10){
  
  closest = matrix(rep(0, nrow(long_bird)), ncol=1)
  for (i in 1:nrow(long_bird)){
    index = 0
    w = 10^10
    for (j in 1:k){
      sum_sq = sum((long_bird[i, ] - new_centroids[j, ])^2)
      if(sum_sq < w){
        w = sum_sq
        index = j
      } 
    }
    closest[i] = index
  }
  
  # Third iteration of centroids:
  
  new_centroids = matrix(rep(0, k*3), ncol=3)
  for(i in 1:k){
    new_centroids[i,]=colMeans(long_bird[group==i,])
  }
}


for(i in 1:k){
  long_bird[closest==i,] = new_centroids[i,]
}
dim(long_bird)

### Reversing long_bird:
dim(long_bird) = dim(bird)
compressed_bird = apply(long_bird, 3, t)
dim(compressed_bird) = dim(long_bird)
dim(compressed_bird)

is.array(compressed_bird)

ones = matrix(1, 128, 128)

compressed_bird = array(c(compressed_bird,ones), dim= c(128,128,4))
dim(compressed_bird)
is.array(compressed_bird)

writePNG(compressed_bird,"birdie.png")

